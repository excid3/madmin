<%= stylesheet_link_tag "https://unpkg.com/flatpickr/dist/flatpickr.min.css", "data-turbo-track": "reload" %>
<%= stylesheet_link_tag "https://unpkg.com/trix/dist/trix.css", "data-turbo-track": "reload" %>
<%= stylesheet_link_tag "https://unpkg.com/tom-select/dist/css/tom-select.min.css", "data-turbo-track": "reload" %>

<script type="module">
  import { Application, Controller } from 'https://cdn.skypack.dev/@hotwired/stimulus'
  const application = Application.start()

  import { Dropdown } from "https://cdn.skypack.dev/tailwindcss-stimulus-components"
  application.register("dropdown", Dropdown)

  import stimulusFlatpickr from 'https://cdn.skypack.dev/stimulus-flatpickr@3.0.0-0'
  application.register("flatpickr", stimulusFlatpickr)

  import TomSelect from 'https://cdn.skypack.dev/tom-select'

  import Rails from 'https://cdn.skypack.dev/@rails/ujs@<%= npm_rails_version %>'
  import * as ActiveStorage from 'https://cdn.skypack.dev/@rails/activestorage@<%= npm_rails_version %>'
  import 'https://cdn.skypack.dev/trix'
  import 'https://cdn.skypack.dev/@rails/actiontext@<%= npm_rails_version %>'

  if (!window._rails_loaded) { Rails.start() }
  ActiveStorage.start()

  import * as Turbo from "https://cdn.skypack.dev/@hotwired/turbo"

  (() => {
    application.register('select', class extends Controller {
      static values = {
        options: Object,
        url: String
      }

      connect() {
        this.select = new TomSelect(this.element, {
          plugins: ['remove_button'],
          valueField: 'id',
          labelField: 'name',
          searchField: 'name',
          load: (search, callback) => {
            let url = search ? `${this.urlValue}?q=${search}` : this.urlValue;
            fetch(url)
              .then(response => response.json())
              .then(json => {
                callback(json);
              }).catch(() => {
                callback();
              });
          }
        })
      }

      disconnect() {
        this.select.destroy()
      }
    })

    application.register('nested-form', class extends Controller {
      static get targets() {
        return [ "links", "template" ]
      }

      connect() {
        this.wrapperClass = this.data.get("wrapperClass") || "nested-fields"
      }

      add_association(event) {
        event.preventDefault()

        var content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, new Date().getTime())
        this.linksTarget.insertAdjacentHTML('beforebegin', content)
      }

      remove_association(event) {
        event.preventDefault()

        let wrapper = event.target.closest("." + this.wrapperClass)

        // New records are simply removed from the page
        if (wrapper.dataset.newRecord == "true") {
          wrapper.remove()

        // Existing records are hidden and flagged for deletion
        } else {
          wrapper.querySelector("input[name*='_destroy']").value = 1
          wrapper.style.display = 'none'
        }
      }
    })
  })()
</script>
