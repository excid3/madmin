<%= stylesheet_link_tag "https://unpkg.com/flatpickr/dist/flatpickr.min.css", "data-turbo-track": "reload" %>
<%= stylesheet_link_tag "https://unpkg.com/trix/dist/trix.css", "data-turbo-track": "reload" %>
<%= stylesheet_link_tag "https://unpkg.com/tom-select/dist/css/tom-select.min.css", "data-turbo-track": "reload" %>

<script type="module">
  import { Application, Controller } from 'https://cdn.skypack.dev/@hotwired/stimulus'
  const application = Application.start()

  import { Dropdown } from "https://cdn.skypack.dev/tailwindcss-stimulus-components"
  application.register("dropdown", Dropdown)

  import stimulusFlatpickr from 'https://cdn.skypack.dev/stimulus-flatpickr@3.0.0-0'
  application.register("flatpickr", stimulusFlatpickr)

  import TomSelect from 'https://cdn.skypack.dev/tom-select'

  import Rails from 'https://cdn.skypack.dev/@rails/ujs@<%= npm_rails_version %>'
  import * as ActiveStorage from 'https://cdn.skypack.dev/@rails/activestorage@<%= npm_rails_version %>'
  import 'https://cdn.skypack.dev/trix'
  import 'https://cdn.skypack.dev/@rails/actiontext@<%= npm_rails_version %>'

  if (!window._rails_loaded) { Rails.start() }
  ActiveStorage.start()

  import * as Turbo from "https://cdn.skypack.dev/@hotwired/turbo"

  (() => {
    application.register('select', class extends Controller {
      static values = {
        options: Object,
        url: String
      }

      get options() {
        return this.optionsValues || []
      }

      connect() {
        this.select = new TomSelect(this.element, {
          plugins: ['caret_position', 'no_backspace_delete', 'remove_button', 'virtual_scroll'],
          valueField: 'id',
          labelField: 'name',
          searchField: ['name', 'search_value'],
          maxOptions: 300,
          onInitialize: () => {
            this.element.parentElement.querySelector(".ts-wrapper").classList.add("w-full", "max-w-3xl")
            this.element.parentElement.querySelector(".ts-dropdown-content").style = "max-height: 20rem;"
          },
          firstUrl: (query) => {
            return `${this.urlValue}?direction=asc&sort=id&q=${encodeURIComponent(query)}`
          },
          load: function(query, callback) {
            const url = this.getUrl(query)
            fetch(url)
              .then(response => response.json())
              .then(json => {
                const next_url = `${url}&page=${json.next_page}`
                if (json.next_page !== null) {
                  this.setNextUrl(query, next_url)
                }

                let data = json.data
                for (const index in data) {
                  data[index].search_value = ""
                  Object.keys(data[index].details).forEach((key) => {
                    data[index].search_value = data[index].search_value.concat(`${data[index].details[key]} `)
                  })
                }
                callback(data)
              }).catch(() => {
                callback()
              })
          },
          render: {
            option: function(item, escape) {
              if (item.details === undefined) return `<div class="text-base">${escape(item.name)}</div>`

              let details = ""
              Object.keys(item.details).forEach((key) => {
                details = details.concat(`<div class="px-2 text-sm truncate">${escape(key)}</div><div class="px-2 text-sm truncate">${escape(item.details[key])}</div>`)
              })
              return `<div class="grid grid-cols-2 gap-2 px-1 py-2 divide-y">
                <div class="col-span-2 text-base">${escape(item.name)}</div>
                ${details}
              </div>`
            },
            loading_more: function(data, escape) {
              return `<div class="flex flex-row items-center py-2 loading-more-results"><div class="spinner"></div> Loading more results ... </div>`
            },
            no_more_results: function(data, escape) {
              return `<div class="no-more-results">No more results</div>`
            }
          }
        })
      }

      disconnect() {
        this.select.destroy()
      }
    })

    application.register('nested-form', class extends Controller {
      static get targets() {
        return [ "links", "template" ]
      }

      connect() {
        this.wrapperClass = this.data.get("wrapperClass") || "nested-fields"
      }

      add_association(event) {
        event.preventDefault()

        var content = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, new Date().getTime())
        this.linksTarget.insertAdjacentHTML('beforebegin', content)
      }

      remove_association(event) {
        event.preventDefault()

        let wrapper = event.target.closest("." + this.wrapperClass)

        // New records are simply removed from the page
        if (wrapper.dataset.newRecord == "true") {
          wrapper.remove()

        // Existing records are hidden and flagged for deletion
        } else {
          wrapper.querySelector("input[name*='_destroy']").value = 1
          wrapper.style.display = 'none'
        }
      }
    })
  })()
</script>
